package com.todaii.english.server.vocabulary;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.springframework.stereotype.Service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.todaii.english.core.entity.DictionaryEntry;
import com.todaii.english.core.entity.VocabDeck;
import com.todaii.english.core.port.GeminiPort;
import com.todaii.english.server.dictionary.DictionaryEntryRepository;
import com.todaii.english.server.dictionary.DictionaryEntryService;
import com.todaii.english.shared.exceptions.BusinessException;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class VocabDeckGeneratorService {
	private final VocabDeckRepository vocabDeckRepository;
	private final DictionaryEntryRepository dictionaryEntryRepository;
	private final DictionaryEntryService dictionaryService;
	private final GeminiPort geminiPort;
	private final ObjectMapper objectMapper;

	public VocabDeck autoGenerateDeckWords(Long deckId, Long quantity) {
		// Lấy deck
		VocabDeck deck = vocabDeckRepository.findById(deckId)
				.orElseThrow(() -> new BusinessException(404, "Deck not found"));

		// Prompt Gemini để sinh list từ
		String prompt = buildPrompt(deck, quantity);
		String rawResponse = geminiPort.generateText(prompt);
		List<String> suggestedWords = parseWords(rawResponse);

		// Danh sách preview
		Set<DictionaryEntry> previewWords = new HashSet<>();

		for (String word : suggestedWords) {
			if (previewWords.size() >= quantity)
				break;

			// Tìm trong DB
			List<DictionaryEntry> entry = dictionaryEntryRepository.findByHeadwordContainingIgnoreCase(word.trim());

			if (entry != null && !entry.isEmpty()) {
				previewWords.addAll(entry);
				continue;
			}

			// Nếu chưa có → gọi API dictionary + Gemini refine
			try {
				List<DictionaryEntry> generated = dictionaryService.createWordByGemini(word);
				if (!generated.isEmpty()) {
					previewWords.add(generated.get(0)); // chỉ lấy 1
				}
			} catch (Exception e) {
				System.err.println("❌ Lỗi khi tạo từ: " + word + " -> " + e.getMessage());
			}
		}

		// Trả về deck preview
		deck.setWords(previewWords);
		return deck;
	}

	private String buildPrompt(VocabDeck deck, Long quantity) {
		return String.format("""
				    Generate a list of %d English vocabulary words suitable for CEFR level %s.
				    The topic is about: "%s".
				    Focus on words that are relevant to this description: "%s".
				    Return ONLY a JSON array of words, like: ["word1","word2",...].
				""", quantity, deck.getCefrLevel(), deck.getName(), deck.getDescription());
	}

	private List<String> parseWords(String rawResponse) {
		try {
			String clean = rawResponse.replaceAll("```json", "").replaceAll("```", "").trim();
			return Arrays.asList(objectMapper.readValue(clean, String[].class));
		} catch (Exception e) {
			throw new BusinessException(500, "Invalid Gemini response format");
		}
	}
}
