package com.todaii.english.infra.client;

import org.springframework.http.HttpStatusCode;
import org.springframework.stereotype.Component;
import org.springframework.web.reactive.function.client.WebClient;

import com.todaii.english.core.port.DictionaryPort;
import com.todaii.english.shared.constants.DictionaryApiUrl;
import com.todaii.english.shared.exceptions.BusinessException;
import com.todaii.english.shared.response.DictionaryApiResponse;

import lombok.extern.slf4j.Slf4j;
import reactor.core.publisher.Mono;

@Component
@Slf4j
public class DictionaryApiClient implements DictionaryPort {

	private final WebClient webClient;

	public DictionaryApiClient(WebClient.Builder builder) {
		this.webClient = builder.baseUrl(DictionaryApiUrl.BASE_URL_v100).build();
	}

	@Override
	public DictionaryApiResponse[] lookupWord(String word) {
		try {
			// G·ª≠i request GET t·ªõi API v·ªõi path parameter l√† t·ª´ c·∫ßn tra
			return webClient.get().uri("/{word}", word).retrieve()

					// X·ª≠ l√Ω l·ªói 4xx (client-side)
					.onStatus(HttpStatusCode::is4xxClientError, clientResponse -> clientResponse
							.bodyToMono(String.class)
							// Log chi ti·∫øt l·ªói t·ª´ server (n·∫øu c√≥ body tr·∫£ v·ªÅ)
							.doOnNext(body -> log.warn("‚ùå 4xx error for word '{}': status={} body={}", word,
									clientResponse.statusCode(), body))
							// N√©m BusinessException v·ªõi th√¥ng tin c·ª• th·ªÉ
							.flatMap(body -> Mono.error(
									new BusinessException(404, "Word not found: " + word + " | Response: " + body))))

					// X·ª≠ l√Ω l·ªói 5xx (server-side)
					.onStatus(HttpStatusCode::is5xxServerError,
							clientResponse -> clientResponse.bodyToMono(String.class)
									// Log l·ªói m·ª©c ƒë·ªô nghi√™m tr·ªçng h∆°n
									.doOnNext(body -> log.error("üí• 5xx error for word '{}': status={} body={}", word,
											clientResponse.statusCode(), body))
									// N√©m BusinessException ƒë·ªÉ controller ph√≠a tr√™n x·ª≠ l√Ω
									.flatMap(body -> Mono
											.error(new BusinessException(500, "Dictionary API error: " + body))))

					// Parse body JSON ‚Üí m·∫£ng DictionaryApiResponse
					.bodyToMono(DictionaryApiResponse[].class)

					// Chuy·ªÉn t·ª´ reactive (Mono) sang blocking ƒë·ªÉ tr·∫£ v·ªÅ m·∫£ng k·∫øt qu·∫£
					.block();

		} catch (BusinessException e) {
			// B·∫Øt l·∫°i l·ªói ƒë√£ x·ª≠ l√Ω trong onStatus, ch·ªâ log th√™m cho d·ªÖ debug
			log.warn("BusinessException for word '{}': {}", word, e.getMessage());
			throw e;
		} catch (Exception e) {
			// B·∫Øt c√°c l·ªói kh√¥ng mong mu·ªën kh√°c: timeout, network, parsing,...
			log.error("‚ö†Ô∏è Unexpected error while looking up '{}': {}", word, e.getMessage(), e);
			throw new BusinessException(500, "Unexpected error while calling dictionary API for: " + word);
		}
	}

}
